/*
 *  setlogfilecommand.cpp
 *  Mothur
 *
 *  Created by westcott on 4/27/10.
 *  Copyright 2010 Schloss Lab. All rights reserved.
 *
 */

#include "setlogfilecommand.h"


//**********************************************************************************************************************
vector<string> SetLogFileCommand::setParameters(){	
	try {
		nkParameters.add(new BooleanParameter("append", false));
		nkParameters.add(new OutputFileParameter("name", true, true));
		nkParameters.addStandardParameters();

		return nkParameters.getNames();
	}
	catch(exception& e) {
		m->errorOut(e, "SetLogFileCommand", "setParameters");
		exit(1);
	}
}
//**********************************************************************************************************************
string SetLogFileCommand::getHelpString(){	
	try {
		string helpString = "The set.logfile command can be used to provide a specific name for your logfile and/or to append the log generated by mothur to an existing file.\n";
		"The set.logfile command parameters are name and append, name is required. Append is set to false by default.\n";
		"The set.logfile command should be in the following format: set.logfile(name=yourLogFileName, append=T).\n";
		"Example set.logfile(name=/Users/lab/desktop/output.txt, append=T).\n";
		"Note: No spaces between parameter labels (i.e. name), '=' and parameters (i.e.yourLogFileName).\n";
		return helpString;
	}
	catch(exception& e) {
		m->errorOut(e, "SetLogFileCommand", "getHelpString");
		exit(1);
	}
}
//**********************************************************************************************************************

SetLogFileCommand::SetLogFileCommand(string option) :
Command(option) {
	try {
		// TODO ensure append only set to true if file exists
	}
	catch(exception& e) {
		m->errorOut(e, "SetLogFileCommand", "SetLogFileCommand");
		exit(1);
	}
}

//**********************************************************************************************************************

int SetLogFileCommand::execute(){
	try {
		
		if (abort == true) { if (calledHelp) { return 0; }  return 2;	}
		
        Settings& settings = Application::getApplication()->getSettings();
        
        string directory = m->hasPath(name);
        if (directory == "") {
            settings.setLogFileName(name, append);
        }else if (m->dirCheck(directory)) {
            settings.setLogFileName(name, append);
        }
		
		return 0;
	}
	catch(exception& e) {
		m->errorOut(e, "SetLogFileCommand", "execute");
		exit(1);
	}
}
//**********************************************************************************************************************/
