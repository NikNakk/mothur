/*
 *  setoutdircommand.cpp
 *  Mothur
 *
 *  Created by westcott on 1/21/10.
 *  Copyright 2010 Schloss Lab. All rights reserved.
 *
 */

#include "setdircommand.h"

//**********************************************************************************************************************
vector<string> SetDirectoryCommand::setParameters(){	
	try {
		nkParameters.add(new DirectoryParameter("tempdefault", false, false, "", "any"));
		nkParameters.add(new BooleanParameter("modifynames", true, false, "", "any"));
		nkParameters.add(new BooleanParameter("debug", false, false, "", "any"));
		nkParameters.add(new InputDirectoryParameter("input", false, false, "", "any"));
		nkParameters.add(new OutputDirectoryParameter("output", false, false, "", "any"));
		nkParameters.addStandardParameters(); // Note this will result in duplicates (output = outputdir, input = inputdir), but this models the previous behaviour
		return nkParameters.getNames();
	}
	catch(exception& e) {
		m->errorOut(e, "SetDirectoryCommand", "setParameters");
		exit(1);
	}
}
//**********************************************************************************************************************
string SetDirectoryCommand::getHelpString(){	
	try {
		string helpString = "The set.dir command can be used to direct the output files generated by mothur to a specific place, the directory must exist.\n";
		"The set.dir command can also be used to specify the directory where your input files are located, the directory must exist.\n";
		"The set.dir command can also be used to override or set the default location mothur will look for files if it is unable to find them, the directory must exist.\n";
        "The set.dir command can also be used to run mothur in debug mode.\n";
        "The set.dir command can also be used to seed random.\n";
        "The set.dir command can also be used to set the modifynames parameter. Default=t, meaning if your sequence names contain ':' change them to '_' to avoid issues while making trees.  modifynames=F will leave sequence names as they are.\n";
		"The set.dir command parameters are input, output, tempdefault and debug and one is required.\n";
        "To run mothur in debug mode set debug=true. Default debug=false.\n";
        "To seed random set seed=yourRandomValue. By default mothur seeds random with the start time.\n";
		"To return the output to the same directory as the input files you may enter: output=clear.\n";
		"To return the input to the current working directory you may enter: input=clear.\n";
		"To set the output to the directory where mothur.exe is located you may enter: output=default.\n";
		"To set the input to the directory where mothur.exe is located you may enter: input=default.\n";
		"To return the tempdefault to the default you provided at compile time you may enter: tempdefault=clear.\n";
		"To set the tempdefault to the directory where mothur.exe is located you may enter: tempdefault=default.\n";
		"The set.dir command should be in the following format: set.dir(output=yourOutputDirectory, input=yourInputDirectory, tempdefault=yourTempDefault).\n";
		"Example set.outdir(output=/Users/lab/desktop/outputs, input=/Users/lab/desktop/inputs).\n";
		"Note: No spaces between parameter labels (i.e. output), '=' and parameters (i.e.yourOutputDirectory).\n";
		return helpString;
	}
	catch(exception& e) {
		m->errorOut(e, "SetDirectoryCommand", "getHelpString");
		exit(1);
	}
}
//**********************************************************************************************************************

SetDirectoryCommand::SetDirectoryCommand(string option) :
Command(option) {
	try {
		Settings& settings = Application::getApplication()->getSettings();
		
		if (nkParameters["debug"]->hasValue()) {
			settings.setDebug(static_cast<BooleanParameter*>(nkParameters["debug"].get())->getBooleanValue());
			m->mothurOut("Setting [DEBUG] flag.\n");
		}
		if (nkParameters["modifynames"]->hasValue()) {
			settings.setModifyNames(static_cast<BooleanParameter*>(nkParameters["nomod"].get())->getBooleanValue());
		}
	}
	catch(exception& e) {
		m->errorOut(e, "SetDirectoryCommand", "SetDirectoryCommand");
		exit(1);
	}
}
//**********************************************************************************************************************

int SetDirectoryCommand::execute(){
	try {
		if (abort == true) { if (calledHelp) { return 0; }  return 2;	}
		
        if (debugorSeedOnly) {  }
        else {
            
            m->mothurOut("Mothur's directories:"); m->mothurOutEndLine();
			Settings& settings = Application::getApplication()->getSettings();
            
            //redirect output
            if ((output == "clear") || (output == "")) {  output = "";  settings.setOutputDir(output);  }
            else if (output == "default") {
                string exepath = m->argv;
                output = exepath.substr(0, (exepath.find_last_of('m')));
                
                m->mothurOut("outputDir=" + output); m->mothurOutEndLine();
				settings.setOutputDir(output);
            }else {
                if (m->mkDir(output)) {
                    m->mothurOut("outputDir=" + output); m->mothurOutEndLine();
					settings.setOutputDir(output);
                }
            }
            
            //redirect input
			if ((input == "clear") || (input == "")) { input = "";  settings.setInputDir(input); }
            else if (input == "default") {
                string exepath = m->argv;
                input = exepath.substr(0, (exepath.find_last_of('m')));
                
                m->mothurOut("inputDir=" + input); m->mothurOutEndLine();
				settings.setInputDir(input);
            }else {
                if (m->dirCheck(input)) {
                    m->mothurOut("inputDir=" + input); m->mothurOutEndLine();
					settings.setInputDir(input);
                }
            }
            
            //set default
            if (tempdefault == "clear") {
#ifdef MOTHUR_FILES
				string temp = MOTHUR_FILES;
				m->mothurOut("tempDefault=" + temp); m->mothurOutEndLine();
				settings.setDefaultPath(temp);
#else
				string temp = "";
				m->mothurOut("No default directory defined at compile time."); m->mothurOutEndLine();
				settings.setDefaultPath(temp);
#endif
            }else if (tempdefault == "") {  //do nothing
            }else if (tempdefault == "default") {
                string exepath = m->argv;
                tempdefault = exepath.substr(0, (exepath.find_last_of('m')));
                
                m->mothurOut("tempDefault=" + tempdefault); m->mothurOutEndLine();  
				settings.setDefaultPath(tempdefault);
            }else {
                if (m->mkDir(tempdefault)) {
                    m->mothurOut("tempDefault=" + tempdefault); m->mothurOutEndLine();  
					settings.setDefaultPath(tempdefault);
                }
            }
        }
		return 0;
	}
	catch(exception& e) {
		m->errorOut(e, "SetDirectoryCommand", "execute");
		exit(1);
	}
}
//**********************************************************************************************************************/
