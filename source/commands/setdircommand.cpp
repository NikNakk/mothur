/*
 *  setoutdircommand.cpp
 *  Mothur
 *
 *  Created by westcott on 1/21/10.
 *  Copyright 2010 Schloss Lab. All rights reserved.
 *
 */

#include "setdircommand.h"
#include "commandparameters/booleanparameter.h"
#include "commandparameters/outputdirectoryparameter.h"
#include "commandparameters/inputdirectoryparameter.h"

 //**********************************************************************************************************************
void SetDirectoryCommand::setParameters() {
	parameters.add(new DirectoryParameter(tempdefault, settings, "tempdefault", false, false, "", "any"));
	parameters.add(new BooleanParameter(modifyNames, "modifynames", true, false, "", "any"));
	parameters.add(new BooleanParameter(debug, "debug", false, false, "", "any"));
	parameters.add(new InputDirectoryParameter(inputDir, settings, "input", false, false, "", "any"));
	parameters.add(new OutputDirectoryParameter(outputDir, settings, "output", false, false, "", "any"));
	parameters.addStandardParameters(inputDir, outputDir); // Note this will result in duplicates (output = outputdir, input = inputdir), but this models the previous behaviour
}
//**********************************************************************************************************************
string SetDirectoryCommand::getHelpString() {
	string helpString = "The set.dir command can be used to direct the output files generated by mothur to a specific place, the directory must exist.\n";
	"The set.dir command can also be used to specify the directory where your input files are located, the directory must exist.\n";
	"The set.dir command can also be used to override or set the default location mothur will look for files if it is unable to find them, the directory must exist.\n";
	"The set.dir command can also be used to run mothur in debug mode.\n";
	"The set.dir command can also be used to seed random.\n";
	"The set.dir command can also be used to set the modifynames parameter. Default=t, meaning if your sequence names contain ':' change them to '_' to avoid issues while making trees.  modifynames=F will leave sequence names as they are.\n";
	"The set.dir command parameters are input, output, tempdefault and debug and one is required.\n";
	"To run mothur in debug mode set debug=true. Default debug=false.\n";
	"To seed random set seed=yourRandomValue. By default mothur seeds random with the start time.\n";
	"To return the output to the same directory as the input files you may enter: output=clear.\n";
	"To return the input to the current working directory you may enter: input=clear.\n";
	"To set the output to the directory where mothur.exe is located you may enter: output=default.\n";
	"To set the input to the directory where mothur.exe is located you may enter: input=default.\n";
	"To return the tempdefault to the default you provided at compile time you may enter: tempdefault=clear.\n";
	"To set the tempdefault to the directory where mothur.exe is located you may enter: tempdefault=default.\n";
	"The set.dir command should be in the following format: set.dir(output=yourOutputDirectory, input=yourInputDirectory, tempdefault=yourTempDefault).\n";
	"Example set.outdir(output=/Users/lab/desktop/outputs, input=/Users/lab/desktop/inputs).\n";
	"Note: No spaces between parameter labels (i.e. output), '=' and parameters (i.e.yourOutputDirectory).\n";
	return helpString;
}
//**********************************************************************************************************************

int SetDirectoryCommand::execute() {
	if (parameters["debug"]->hasValue()) {
		settings.setDebug(static_cast<BooleanParameter*>(parameters["debug"].get())->getBooleanValue());
		LOG(INFO) << "Setting [DEBUG] flag.\n";
	}
	if (parameters["modifynames"]->hasValue()) {
		settings.setModifyNames(static_cast<BooleanParameter*>(parameters["nomod"].get())->getBooleanValue());
	}
		LOG(INFO) << "Mothur's directories:" << '\n';
		/*
		//redirect output
		if ((output == "clear") || (output == "")) { output = "";  settings.setOutputDir(output); }
		else if (output == "default") {
			string exepath = m->argv;
			output = exepath.substr(0, (exepath.find_last_of('m')));

			LOG(INFO) << "outputDir=" + output << '\n';
			settings.setOutputDir(output);
		}
		else {
			if (m->mkDir(output)) {
				LOG(INFO) << "outputDir=" + output << '\n';
				settings.setOutputDir(output);
			}
		}

		//redirect input
		if ((input == "clear") || (input == "")) { input = "";  settings.setInputDir(input); }
		else if (input == "default") {
			string exepath = m->argv;
			input = exepath.substr(0, (exepath.find_last_of('m')));

			LOG(INFO) << "inputDir=" + input << '\n';
			settings.setInputDir(input);
		}
		else {
			if (m->dirCheck(input)) {
				LOG(INFO) << "inputDir=" + input << '\n';
				settings.setInputDir(input);
			}
		}

		//set default
		if (tempdefault == "clear") {
#ifdef MOTHUR_FILES
			string temp = MOTHUR_FILES;
			LOG(INFO) << "tempDefault=" + temp << '\n';
			settings.setDefaultPath(temp);
#else
			string temp = "";
			LOG(INFO) << "No default directory defined at compile time." << '\n';
			settings.setDefaultPath(temp);
#endif
		}
		else if (tempdefault == "") {  //do nothing
		}
		else if (tempdefault == "default") {
			string exepath = m->argv;
			tempdefault = exepath.substr(0, (exepath.find_last_of('m')));

			LOG(INFO) << "tempDefault=" + tempdefault << '\n';
			settings.setDefaultPath(tempdefault);
		}
		else {
			if (m->mkDir(tempdefault)) {
				LOG(INFO) << "tempDefault=" + tempdefault << '\n';
				settings.setDefaultPath(tempdefault);
			}
		}
	}*/
	return 0;
}
//**********************************************************************************************************************/
